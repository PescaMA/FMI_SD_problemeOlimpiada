#include <bits/stdc++.h>
/// https://codeforces.com/gym/103999/submission/260853068
/// https://codeforces.com/gym/103999/problem/L
/// SAlt
int const N = 100005;
int const MOD = 1e9 + 7;

template <class T>
class RMQ{
    std::vector<std::vector<int>> result; /// result[i][j] = minimum of the next 2^i numbers starting from j.
    std::vector<T> v;
    bool (*cmp)(T,T);
public:
    /// int (*func)(int, int)
    bool compare(T a,T b){
        return a < b;
    }
    RMQ(const std::vector<T>& input,bool (*cmp)(T,T) = compare):
        cmp(cmp){
        v = input;
        int n = input.size();
        int logOfN = log2(n);
        result.resize(logOfN + 1,std::vector<int>(n));

        for(int j = 0; j<n; j++)
            result[0][j] = j;
        int dif = 1;
        for (int i = 1; i <= logOfN; i++){
            for(int j = 0; j<n - dif; j++){
                if(cmp(input[result[i-1][j]],input[result[i-1][j+dif]]))
                    result[i][j] = result[i-1][j];
                else
                    result[i][j] = result[i-1][j+dif];
            }
            dif = (dif<<1);
        }
    }
    T getMin(int i,int j){
        return v[getMinPos(i,j)];
    }
    int getMinPos(int i,int j){
        if(i == j) return i;
        int dif = log2(j - i);
        if(cmp(v[result[dif][i]], v[result[dif][j - (1<<dif)+1]]))
            return result[dif][i];
        else
            return result[dif][j - (1<<dif)+1];
    }
    void testPos(){
        for(unsigned i=0;i<result[0].size();i++){
            for(unsigned j =i;j<result[0].size();j++){
                std::cout << i << ' ' << j << ' '<< getMinPos(i,j) << '\n';
            }
        }
    }
    void testIntern(){
        for (unsigned i = 0; i < result.size(); i++){
            for(unsigned j = 0; j< result[i].size(); j++)
                std::cout << result[i][j] << ' ';
            std::cout << '\n';
        }
    }
};

int main(){
    using namespace std;
    cin.tie(0); cout.tie(0);
    ios_base::sync_with_stdio(0);

    int n;
    cin>>n;
    vector<int> v;
    for(int i=0;i<n;i++){
        int x;
        cin >> x;
        v.push_back(x);
    }
    vector<int> p2;
    p2.push_back(1);
    for(int i=1; i <= n; ++i){
        p2.push_back((p2[i-1]<<1) % MOD);
    }

    RMQ<int> rmq(v,[](int x,int y){return x > y;});
    int q;
    cin >> q;
    while(q--){
        int l,r;
        cin >> l >> r;
        int mx = rmq.getMin(l-1,r-1);
        cout << (1LL * mx * p2[r-l])%MOD << '\n';
    }

}
