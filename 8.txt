#include <bits/stdc++.h>
using namespace std;

#define int long long /// MAGIE :D

/// insert1insert2
/// https://kilonova.ro/problems/2410
/// https://kilonova.ro/submissions/379143

int const N = 200005;
int const MOD = 666013;
int n,m;
struct Query{
    int type,pos =-1,val;
} v[N];
struct AIB{
    int aib[N];
    int inline zeros(int const& x) { return x & (-x);}
    void insert(int pos, int val = 1){
        for (int i = pos; i < N; i += zeros(i)){
            aib[i] += val;
        }
    }
    int findSum(long long sum){
        int p2 = 1; /// power of 2.
        int i = 0;  /// index of result.

        while(p2<N){
            if(aib[p2] < sum)
                i=p2;
            p2<<=1;
        } /// i will be smallest power of 2  that contains the sum.

        int currentSum = aib[i];
        p2 = (i>>1);
        while(p2 > 0){
            if(currentSum + aib[i+p2] < sum){
                i += p2;
                currentSum += aib[i];
            }
            p2>>=1;
        }
        return i + 1;
    }
    long long getSum(int pos){
        if(pos == 0) return 0;
        long long rez = 0;
        for (int i = pos; i > 0; i -= zeros(i))
            rez += aib[i];
        return rez;
    }
    void clear(){
        std::fill(aib,aib + N, 0);
    }
    void addEverywhere(int val){
        clear();
        for(int i=1;i<N;i++)
            insert(i,val);


    }
}aibPOS,aibSUM;
int32_t main()
{
    cin >> n;

    for(int i = 0;i<n;i++){
        cin >> v[i].type;
        if(v[i].type == 3)continue;
        cin >> v[i].pos >> v[i].val;
        v[i].pos++;
    }
    aibPOS.addEverywhere(1);

    for(int i=n-1;i>-1;i--){
        if(v[i].type == 3) continue;
        ///std::cout << v[i].pos << ' ' << aibPOS.findSum(v[i].pos) << '\n';
        v[i].pos = aibPOS.findSum(v[i].pos);
        aibPOS.insert(v[i].pos,-1);
    }

    int pos1,pos2;
    aibSUM.clear();
    long long result = 0;
    for(int i = 0;i<n;i++){
        if(v[i].type == 1){
            pos1 = v[i].pos;
            aibSUM.insert(pos1,v[i].val);}
        if(v[i].type == 2){
            pos2 = v[i].pos;
            aibSUM.insert(pos2,v[i].val);}
        if(v[i].type == 3){
            result = (result + aibSUM.getSum(max(pos1,pos2)) - aibSUM.getSum(min(pos1,pos2) - 1))%MOD;
        }
    }

    cout << result;
}
